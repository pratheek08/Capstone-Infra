trigger: none
pool:
  name: Default
variables:
  terraformDirectory: '.'
  azureServiceConnection: 'prashanthscn'
stages:
  - stage: Terraform
    jobs:
      - job: TerraformJob
        displayName: 'Terraform Infrastructure Deployment'
        steps:
          - task: AzureCLI@2
            displayName: 'Terraform Init'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              workingDirectory: $(terraformDirectory)
              inlineScript: |
                terraform init -upgrade
          # - task: AzureCLI@2
          #   displayName: 'Terraform destroy'
          #   inputs:
          #     azureSubscription: $(azureServiceConnection)
          #     scriptType: bash
          #     scriptLocation: inlineScript
          #     workingDirectory: $(terraformDirectory)
          #     inlineScript: |
          #       terraform destroy -auto-approve

          - task: AzureCLI@2
            displayName: 'Terraform Validate'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              workingDirectory: $(terraformDirectory)
              inlineScript: |
                terraform validate

          - task: AzureCLI@2
            displayName: 'Terraform Plan'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              workingDirectory: $(terraformDirectory)
              inlineScript: |
                terraform plan -lock=false -out=tfplan
                
          - task: AzureCLI@2
            displayName: 'Terraform Apply'
            continueOnError: true
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              workingDirectory: $(terraformDirectory)
              inlineScript: |
                terraform apply -auto-approve -lock=false tfplan
          - task: AzureCLI@2
            displayName: 'Push errored.tfstate to backend'
            condition: failed()  # Run only if apply failed
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              workingDirectory: $(terraformDirectory)
              inlineScript: |
                echo "Checking for errored.tfstate..."
                if [ -f errored.tfstate ]; then
                  echo "Pushing errored.tfstate to backend..."
                  terraform init -upgrade
                  terraform state push errored.tfstate
                else
                  echo "No errored.tfstate found. Skipping."
                fi
