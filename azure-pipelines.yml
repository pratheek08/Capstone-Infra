trigger: none

variables:
  azureServiceConnection: '9030fce5-888e-4022-a896-4e042506c89a'  # üîÅ Replace with your Azure DevOps service connection name
  terraformDirectory: './'  # Change this if your Terraform code is in a subfolder

stages:
  - stage: Terraform
    displayName: 'Terraform Provisioning Stage'
    jobs:
      - job: terraform
        displayName: 'Terraform Workflow'
        pool:
          name: default

        steps:
          - task: Checkout@1
            displayName: 'Checkout Source Code'

          # ‚úÖ Install Terraform
          - task: Bash@3
            displayName: 'Install Terraform'
            inputs:
              targetType: 'inline'
              script: |
                echo "Installing Terraform CLI"
                sudo apt-get update -y
                sudo apt-get install -y gnupg software-properties-common curl unzip
                curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
                echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
                sudo apt-get update -y
                sudo apt-get install terraform -y
                terraform -version

          # ‚úÖ Terraform Init
          - task: AzureCLI@2
            displayName: 'Terraform Init'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              workingDirectory: $(terraformDirectory)
              inlineScript: |
                terraform init

          # ‚úÖ Terraform Validate
          - task: AzureCLI@2
            displayName: 'Terraform Validate'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              workingDirectory: $(terraformDirectory)
              inlineScript: |
                terraform validate

          # ‚úÖ Terraform Plan
          - task: AzureCLI@2
            displayName: 'Terraform Plan'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              workingDirectory: $(terraformDirectory)
              inlineScript: |
                terraform plan -out=tfplan

          # ‚úÖ Terraform Apply
          - task: AzureCLI@2
            displayName: 'Terraform Apply'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              workingDirectory: $(terraformDirectory)
              inlineScript: |
                terraform apply -auto-approve tfplan
